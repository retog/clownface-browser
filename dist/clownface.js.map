{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "index.js",
    "node_modules/clownface/index.js"
  ],
  "names": [],
  "mappings
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "var Clownface = require('clownface');\nif (typeof window !== 'undefined') {\n    window.Clownface = Clownface;\n}",
    "var rdf = require('rdf-ext')\n\nvar clownface = {}\n\nclownface.options = {\n  detectNamedNodes: true,\n  namedNodeRegEx: /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/\n}\n\nfunction node (value) {\n  if (!value) {\n    return undefined\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(function (item) {\n      return node(item)\n    })\n  }\n\n  if (typeof value === 'object' && value.interfaceName) {\n    return value\n  }\n\n  if (typeof value === 'string') {\n    if (clownface.options.detectNamedNodes && clownface.options.namedNodeRegEx.test(value)) {\n      return rdf.createNamedNode(value)\n    } else {\n      return rdf.createLiteral(value)\n    }\n  } else if (typeof value === 'number') {\n    return rdf.createLiteral(value + '')\n  } else {\n    throw new Error('unknown type')\n  }\n}\n\nfunction nodeGraph (value, graph, graphIri) {\n  if (Array.isArray(value)) {\n    return value.map(function (item) {\n      return nodeGraph(item, graph, graphIri)\n    })\n  }\n\n  value = node(value)\n  value.graph = graph\n  value.graphIri = graphIri\n\n  return value\n}\n\nfunction inArray (node, array) {\n  return array.some(function (otherNode) {\n    return otherNode.equals(node)\n  })\n}\n\nfunction toArray (value) {\n  if (!value) {\n    return undefined\n  }\n\n  if (!Array.isArray(value)) {\n    return [value]\n  }\n\n  return value\n}\n\nclownface.Graph = function (graph, nodes) {\n  if (!(this instanceof clownface.Graph)) {\n    return new clownface.Graph(graph, nodes)\n  }\n\n  this.context = node(toArray(nodes))\n\n  var match = function (subject, predicate, object, property) {\n    if (!graph) {\n      return null\n    }\n\n    var matches = []\n\n    predicate = node(toArray(predicate))\n\n    graph.forEach(function (triple) {\n      if (subject !== null && !inArray(triple.subject, subject)) {\n        return\n      }\n\n      if (predicate !== null && !inArray(triple.predicate, predicate)) {\n        return\n      }\n\n      if (object !== null && !inArray(triple.object, object)) {\n        return\n      }\n\n      matches.push(triple[property])\n    })\n\n    return matches\n  }\n\n  this.graph = function () {\n    return graph\n  }\n\n  this.node = function (value) {\n    return clownface.Graph(graph, value)\n  }\n\n  this.in = function (predicate) {\n    return clownface.Graph(graph, match(null, predicate, this.context, 'subject'))\n  }\n\n  this.out = function (predicate) {\n    return clownface.Graph(graph, match(this.context, predicate, null, 'object'))\n  }\n\n  this.nodes = function () {\n    if (!this.context) {\n      return []\n    }\n\n    return this.context\n  }\n\n  this.literal = function () {\n    if (!this.context) {\n      return undefined\n    }\n\n    return this.context\n      .map(function (node) {\n        return node.nominalValue\n      })\n  }\n\n  this.removeIn = function (predicate) {\n    if (predicate) {\n      predicate = node(toArray(predicate))\n    }\n\n    this.nodes().forEach(function (o) {\n      if (predicate) {\n        predicate.forEach(function (p) {\n          graph.removeMatches(null, p, o)\n        })\n      } else {\n        graph.removeMatches(null, null, o)\n      }\n    })\n\n    return this\n  }\n\n  this.removeOut = function (predicate) {\n    if (predicate) {\n      predicate = node(toArray(predicate))\n    }\n\n    this.nodes().forEach(function (s) {\n      if (predicate) {\n        predicate.forEach(function (p) {\n          graph.removeMatches(s, p, null)\n        })\n      } else {\n        graph.removeMatches(s, null, null)\n      }\n    })\n\n    return this\n  }\n\n  this.toArray = function () {\n    return this.nodes().map(this.node)\n  }\n\n  this.forEach = function (callback) {\n    return this.toArray().forEach(callback)\n  }\n\n  this.map = function (callback) {\n    return this.toArray().map(callback)\n  }\n\n  this.toString = function () {\n    return this.literal().join()\n  }\n}\n\nclownface.Store = function (store, nodes) {\n  if (!(this instanceof clownface.Store)) {\n    return new clownface.Store(store, nodes)\n  }\n\n  this.context = toArray(nodes)\n\n  this.store = function () {\n    return store\n  }\n\n  this.graphs = function () {\n    var unique = []\n\n    this.nodes().forEach(function (item) {\n      if (unique.indexOf(item.graph) === -1) {\n        unique.push(item.graph)\n      }\n    })\n\n    return unique\n  }\n\n  this.node = function (value, graphIri, then) {\n    var graphIris = toArray(graphIri || value.graphIri || value)\n\n    return Promise.all(graphIris.map(function (graphIri) {\n      return store.graph(graphIri)\n    })).then(function (graphs) {\n      var nodes = []\n\n      graphs.forEach(function (graph, index) {\n        nodes = nodes.concat(nodeGraph(value, graph, graphIris[index]))\n      })\n\n      if (then) {\n        return Promise.resolve(then(clownface.Store(store, nodes)))\n      } else {\n        return clownface.Store(store, nodes)\n      }\n    })\n  }\n\n  this.in = function (predicate) {\n    var matches = []\n\n    this.nodes().forEach(function (item) {\n      matches = matches.concat(clownface.Graph(item.graph, item).in(predicate).nodes().map(function (match) {\n        return nodeGraph(match, item.graph, item.graphIri)\n      }))\n    })\n\n    return clownface.Store(store, matches)\n  }\n\n  this.out = function (predicate) {\n    var matches = []\n\n    this.nodes().forEach(function (item) {\n      matches = matches.concat(clownface.Graph(item.graph, item).out(predicate).nodes().map(function (match) {\n        return nodeGraph(match, item.graph, item.graphIri)\n      }))\n    })\n\n    return clownface.Store(store, matches)\n  }\n\n  this.jump = function (then) {\n    return Promise.all(this.nodes().map(function (item) {\n      return store.graph(item.nominalValue).then(function (graph) {\n        return nodeGraph(item, graph, item.nominalValue)\n      })\n    })).then(function (entries) {\n      if (then) {\n        return Promise.resolve(then(clownface.Store(store, entries)))\n      } else {\n        return clownface.Store(store, entries)\n      }\n    })\n  }\n\n  this.nodes = function () {\n    if (!this.context) {\n      return []\n    }\n\n    return this.context\n  }\n\n  this.literal = function () {\n    if (!this.context) {\n      return undefined\n    }\n\n    return this.context\n      .map(function (node) {\n        return node.nominalValue\n      })\n  }\n\n  this.toArray = function () {\n    return this.nodes().map(function (node) {\n      return clownface.Store(store, node)\n    })\n  }\n\n  this.forEach = function (callback) {\n    return this.toArray().forEach(callback)\n  }\n\n  this.map = function (callback) {\n    return this.toArray().map(callback)\n  }\n\n  this.toString = function () {\n    return this.literal().join()\n  }\n}\n\nmodule.exports = clownface\n"
  ]
}